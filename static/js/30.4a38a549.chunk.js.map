{"version":3,"file":"static/js/30.4a38a549.chunk.js","mappings":"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","sources":["components/Auth/AuthNav/AuthNav.styled.ts","components/Auth/AuthNav/AuthNav.tsx","components/InterfaceElements/EntryField/EntryField.styled.ts","components/InterfaceElements/EntryField/EntryField.tsx","hooks/useModal.ts","components/Modal/Modal.styled.ts","components/Modal/Modal.tsx","helpers/validationSchemas/resetPasswordSchema.ts","helpers/validationSchemas/signinSchema.ts","hooks/useLogin.ts","hooks/useResetPasswordMail.ts","components/Modal/ResetPassword/ResetPassword.styled.ts","components/Modal/ResetPassword/ResetPassword.tsx","components/Auth/SigninForm/SigninForm.styled.ts","components/Auth/SigninForm/SigninForm.tsx","pages/SigninPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  margin-bottom: 30px;\n`;\n\nexport const Item = styled.li`\n  margin-right: 30px;\n\n  :last-child {\n    margin-right: 0;\n  }\n`;\n\nexport const AuthLink = styled(NavLink)`\n  font-weight: 900;\n  font-size: 42px;\n  text-transform: uppercase;\n\n  color: var(--brown-color);\n\n  &.active {\n    opacity: 0.7;\n  }\n`;\n","import useSound from 'use-sound';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport { getSoundOff } from 'redux/options/optionsSelectors';\n\nimport sounds from 'sounds/sounds.mp3';\nimport sprite from 'sounds/sprite';\n\nimport { List, Item, AuthLink } from './AuthNav.styled';\n\nconst AuthNav: React.FC<{}> = () => {\n  const soundOff = useAppSelector(getSoundOff);\n  const [play] = useSound(sounds, { sprite: sprite, soundEnabled: soundOff });\n\n  return (\n    <List>\n      <Item>\n        <AuthLink to=\"/sign-in\" onClick={() => play({ id: 'counter_click' })}>\n          Sign in\n        </AuthLink>\n      </Item>\n      <Item>\n        <AuthLink to=\"/sign-up\" onClick={() => play({ id: 'counter_click' })}>\n          Sign up\n        </AuthLink>\n      </Item>\n    </List>\n  );\n};\n\nexport default AuthNav;\n","import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\nimport { IWrapperStyled, IInputStyled } from 'types/IEntryField';\n\nexport const Wrapper = styled.label<IWrapperStyled>`\n  display: flex;\n  flex-direction: column;\n  margin: ${({ margin }) => (margin ? margin : '')};\n`;\n\nexport const Label = styled.span`\n  font-size: 15px;\n  text-transform: uppercase;\n  color: var(--brown-color);\n\n  margin-bottom: 6px;\n`;\n\nexport const Input = styled(Field)<IInputStyled>`\n  width: ${({ width }) => (width ? width : '')};\n  height: ${({ height }) => (height ? height : '')};\n  padding: 0 15px;\n\n  font-family: inherit;\n  font-weight: 700;\n  font-size: 19px;\n\n  color: var(--brown-color);\n  background: var(--white-transparent);\n  border: 2px solid var(--brown-color);\n  border-radius: 8px;\n  outline: none;\n\n  :focus {\n    border: 2px solid rgba(105, 74, 4, 0.7);\n  }\n\n  ::placeholder {\n    font-size: 19px;\n    color: var(--brown-color);\n    opacity: 0.5;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 5px;\n  color: red;\n`;\n","import { IEntryFieldState } from 'types/IEntryField';\nimport { Wrapper, Label, Input, Error } from './EntryField.styled';\n\nconst EntryField: React.FC<IEntryFieldState> = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  required,\n  placeholder,\n  width,\n  height,\n  margin,\n}) => {\n  return (\n    <Wrapper margin={margin}>\n      <Label>{label}</Label>\n      <Input\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n        required={required}\n        placeholder={placeholder}\n        width={width}\n        height={height}\n      />\n      <Error name={name} component=\"div\" />\n    </Wrapper>\n  );\n};\n\nexport default EntryField;\n","import { useEffect } from 'react';\n\nconst useModal = (onClose: () => void) => {\n  useEffect(() => {\n    const onPressEscape = (e: { code: string }) => {\n      if (e.code === 'Escape') {\n        onClose();\n      }\n    };\n\n    window.addEventListener('keydown', onPressEscape);\n\n    return () => window.removeEventListener('keydown', onPressEscape);\n  }, [onClose]);\n\n  const onBackdropClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  return { onBackdropClick };\n};\n\nexport default useModal;\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n\n  width: 100vw;\n  height: 100vh;\n\n  background-color: rgba(0, 0, 0, 0.8);\n`;\n\nexport const Wrapper = styled.div`\n  position: relative;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  width: 780px;\n  height: auto;\n  padding: 60px;\n\n  background-color: var(--white-color);\n  color: var(--brown-color);\n  border-radius: 30px;\n  border: 5px solid var(--brown-transparent);\n`;\n\nexport const TitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 70px;\n  padding-bottom: 30px;\n\n  border-bottom: 1px solid var(--green-color);\n`;\n\nexport const Title = styled.h1`\n  font-size: 38px;\n  font-weight: 900;\n`;\n\nexport const CloseButton = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  color: var(--brown-color);\n  background-color: transparent;\n  border: none;\n\n  cursor: pointer;\n  transition: color var(--hover-effect);\n\n  :hover,\n  :focus {\n    color: var(--green-color);\n  }\n`;\n","import useModal from 'hooks/useModal';\n\nimport { createPortal } from 'react-dom';\nimport { IModalState } from 'types/IModal';\n\nimport IconSwitcher from 'components/InterfaceElements/IconSwitcher';\n\nimport {\n  Backdrop,\n  Wrapper,\n  TitleWrapper,\n  Title,\n  CloseButton,\n} from './Modal.styled';\n\nconst modalRoot = document.querySelector('#modal-root') as HTMLDivElement;\n\nconst Modal: React.FC<IModalState> = ({ children, title, onClose }) => {\n  const { onBackdropClick } = useModal(onClose);\n\n  return createPortal(\n    <Backdrop onClick={onBackdropClick}>\n      <Wrapper>\n        <TitleWrapper>\n          <Title>{title}</Title>\n          <CloseButton type=\"button\" onClick={onClose}>\n            <IconSwitcher name=\"cross\" size=\"18px\" fill=\"currentColor\" />\n          </CloseButton>\n        </TitleWrapper>\n        {children}\n      </Wrapper>\n    </Backdrop>,\n    modalRoot,\n  );\n};\n\nexport default Modal;\n","import * as yup from 'yup';\n\nconst resetPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n});\n\nconst restorePasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n  passwordAgain: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match'),\n});\n\nexport { resetPasswordSchema, restorePasswordSchema };\n","import * as yup from 'yup';\n\nconst signinSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n});\n\nexport default signinSchema;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch } from 'hooks/useAppDispatch';\nimport useSound from 'use-sound';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport { getSoundOff } from 'redux/options/optionsSelectors';\n\nimport sounds from 'sounds/sounds.mp3';\nimport sprite from 'sounds/sprite';\nimport operations from 'redux/user/userOperations';\nimport { toast } from 'react-toastify';\n\nimport { ISigninData } from 'types/IProfile';\nimport { IAuthRes } from 'types/IUserRessponse';\nimport signinSchema from 'helpers/validationSchemas/signinSchema';\n\nconst useLogin = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const soundOff = useAppSelector(getSoundOff);\n  const [play] = useSound(sounds, { sprite: sprite, soundEnabled: soundOff });\n\n  const [showModalResetPassword, setShowModalResetPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n    rememberMe: false,\n  };\n\n  const toogleModalResetPassword = () => {\n    setShowModalResetPassword(prevState => !prevState);\n    play({ id: 'counter_click' });\n  };\n\n  const login = async (values: ISigninData) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n\n    const res = await dispatch(operations.signin(user));\n\n    (res.payload as IAuthRes).status === 'ok'\n      ? navigate('/profile')\n      : toast.warning('Sorry something went wrong... Please try again.');\n  };\n\n  return {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  };\n};\n\nexport default useLogin;\n","import { useAppDispatch } from 'hooks/useAppDispatch';\nimport operations from 'redux/user/userOperations';\nimport { useNavigate } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport { IEditEmailData } from 'types/IProfile';\nimport { IResetPasswordRes } from 'types/IUserRessponse';\n\nconst useResetPasswordMail = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    email: '',\n  };\n\n  const onSubmit = async (values: IEditEmailData) => {\n    const res = await dispatch(operations.sendPasswordResetEmail(values));\n\n    if ((res.payload as IResetPasswordRes).status === 'ok') {\n      navigate('/');\n      toast.success(\n        'Email sent successfully. Please check your inbox for a link to reset your password.',\n      );\n    }\n  };\n\n  return { initialValues, onSubmit };\n};\n\nexport default useResetPasswordMail;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  text-align: center;\n  margin-bottom: 40px;\n`;\n","import useResetPasswordMail from 'hooks/useResetPasswordMail';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\n\nimport { resetPasswordSchema } from 'helpers/validationSchemas/resetPasswordSchema';\nimport { Text } from './ResetPassword.styled';\n\nconst ResetPassword: React.FC<{}> = () => {\n  const { initialValues, onSubmit } = useResetPasswordMail();\n\n  return (\n    <>\n      <Text>\n        Enter the email address to which the account is registered. We will send\n        an email to reset and reset your password.\n      </Text>\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={resetPasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"100%\"\n              margin=\"0 0 30px 0\"\n            />\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"100%\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              send\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ResetPassword;\n","import styled from '@emotion/styled';\n\nexport const Tuple = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 30px;\n  margin-top: 30px;\n`;\n\nexport const StyledLink = styled.button`\n  font-family: inherit;\n  font-size: 19px;\n\n  border: none;\n  background-color: transparent;\n  color: var(--green-color);\n\n  cursor: pointer;\n  transition: opacity var(--hover-effect);\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n`;\n","import useLogin from 'hooks/useLogin';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\nimport AuthNav from '../AuthNav';\nimport Modal from 'components/Modal';\nimport ResetPassword from 'components/Modal/ResetPassword';\n\nimport { Tuple, StyledLink } from './SigninForm.styled';\n\nconst SigninForm: React.FC<{}> = () => {\n  const {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  } = useLogin();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"856px\"\n      padding=\"50px\"\n    >\n      <AuthNav />\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={login}\n        validationSchema={signinSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Tuple>\n              <EntryField\n                label=\"email\"\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"Enter your e-mail\"\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"756px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n              onClick={() => play({ id: 'counter_click' })}\n            >\n              Sign in\n            </Button>\n\n            <Tuple>\n              <StyledLink type=\"button\" onClick={toogleModalResetPassword}>\n                Lost your password?\n              </StyledLink>\n            </Tuple>\n          </Form>\n        )}\n      </Formik>\n\n      {showModalResetPassword && (\n        <Modal title=\"Reset the password\" onClose={toogleModalResetPassword}>\n          <ResetPassword />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default SigninForm;\n","import SigninForm from 'components/Auth/SigninForm';\n\nconst SigninPage: React.FC<{}> = () => {\n  return <SigninForm />;\n};\n\nexport default SigninPage;\n"],"names":["List","styled","Item","AuthLink","NavLink","soundOff","useAppSelector","getSoundOff","useSound","sounds","sprite","soundEnabled","play","to","onClick","id","Wrapper","margin","Label","Input","Field","width","height","Error","ErrorMessage","label","type","name","value","onChange","required","placeholder","component","onClose","useEffect","onPressEscape","e","code","window","addEventListener","removeEventListener","onBackdropClick","target","currentTarget","Backdrop","TitleWrapper","Title","CloseButton","modalRoot","document","querySelector","children","title","useModal","createPortal","IconSwitcher","size","fill","resetPasswordSchema","yup","shape","email","restorePasswordSchema","password","min","max","passwordAgain","oneOf","dispatch","useAppDispatch","navigate","useNavigate","useState","showModalResetPassword","setShowModalResetPassword","login","values","user","operations","payload","status","toast","initialValues","rememberMe","signinSchema","toogleModalResetPassword","prevState","onSubmit","Text","useResetPasswordMail","validationSchema","handleSubmit","handleChange","EntryField","Button","background","borderRadius","shadow","Tuple","StyledLink","useLogin","Container","alignItems","padding","AuthNav","Modal"],"sourceRoot":""}