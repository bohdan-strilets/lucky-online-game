{"version":3,"file":"static/js/371.92f3f09e.chunk.js","mappings":"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","sources":["components/InterfaceElements/Pagination/Pagination.styled.ts","components/InterfaceElements/Pagination/Responsiv/Mobile.tsx","components/InterfaceElements/Pagination/Responsiv/Desktop.tsx","components/InterfaceElements/Pagination/Pagination.tsx","helpers/dateFormatting.ts","hooks/usePagination.ts","hooks/useBetList.ts","components/BetLlist/BetLlist.styled.ts","components/BetLlist/Responsiv/Mobile.tsx","components/BetLlist/Responsiv/Tablet.tsx","components/BetLlist/Responsiv/Desktop.tsx","components/BetLlist/BetLlist.tsx","pages/BetLlistPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport screenWidth from 'helpers/screenWidth';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Points = styled.p`\n  margin-right: 3px;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    margin-right: 10px;\n  }\n`;\n","import IconSwitcher from 'components/InterfaceElements/IconSwitcher';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { IPagination } from 'types/IPagination';\nimport { Wrapper, Points } from '../Pagination.styled';\n\nconst Mobile: React.FC<IPagination> = ({\n  contentPerPage,\n  arr,\n  prevPage,\n  page,\n  setPage,\n  gaps,\n  totalPages,\n  nextPage,\n  margin,\n}) => {\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"100%\"\n      padding=\"15px 10px\"\n      alignItems=\"center\"\n      margin={margin}\n    >\n      <Wrapper>\n        <Button\n          type=\"button\"\n          background=\"blue\"\n          borderRadius=\"10px\"\n          height=\"35px\"\n          width=\"35px\"\n          onClick={prevPage}\n          margin=\"0 3px 0 0\"\n        >\n          <IconSwitcher\n            name=\"arrowLeft\"\n            size=\"16px\"\n            fill=\"var(--white-color)\"\n          />\n        </Button>\n\n        {page === 1 ? (\n          <Button\n            type=\"button\"\n            background=\"green\"\n            borderRadius=\"10px\"\n            height=\"35px\"\n            width=\"35px\"\n            onClick={() => setPage(1)}\n            margin=\"0 3px 0 0\"\n          >\n            1\n          </Button>\n        ) : (\n          <Button\n            type=\"button\"\n            background=\"blue\"\n            borderRadius=\"10px\"\n            height=\"35px\"\n            width=\"35px\"\n            onClick={() => setPage(1)}\n            margin=\"0 3px 0 0\"\n          >\n            1\n          </Button>\n        )}\n\n        {gaps.before ? <Points>...</Points> : null}\n        {gaps.paginationGroup.map((el: number) =>\n          page === el ? (\n            <Button\n              type=\"button\"\n              background=\"green\"\n              borderRadius=\"10px\"\n              height=\"35px\"\n              width=\"35px\"\n              onClick={() => setPage(el)}\n              margin=\"0 3px 0 0\"\n            >\n              {el}\n            </Button>\n          ) : (\n            <Button\n              type=\"button\"\n              background=\"blue\"\n              borderRadius=\"10px\"\n              height=\"35px\"\n              width=\"35px\"\n              onClick={() => setPage(el)}\n              margin=\"0 3px 0 0\"\n            >\n              {el}\n            </Button>\n          ),\n        )}\n        {gaps.after ? <Points>...</Points> : null}\n\n        {page === totalPages ? (\n          <Button\n            type=\"button\"\n            background=\"green\"\n            borderRadius=\"10px\"\n            height=\"35px\"\n            width=\"35px\"\n            onClick={() => setPage(totalPages)}\n            margin=\"0 3px 0 0\"\n          >\n            {totalPages}\n          </Button>\n        ) : (\n          <Button\n            type=\"button\"\n            background=\"blue\"\n            borderRadius=\"10px\"\n            height=\"35px\"\n            width=\"35px\"\n            onClick={() => setPage(totalPages)}\n            margin=\"0 3px 0 0\"\n          >\n            {totalPages}\n          </Button>\n        )}\n\n        <Button\n          type=\"button\"\n          background=\"blue\"\n          borderRadius=\"10px\"\n          height=\"35px\"\n          width=\"35px\"\n          onClick={nextPage}\n        >\n          <IconSwitcher\n            name=\"arrowRight\"\n            size=\"16px\"\n            fill=\"var(--white-color)\"\n          />\n        </Button>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Mobile;\n","import IconSwitcher from 'components/InterfaceElements/IconSwitcher';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { IPagination } from 'types/IPagination';\nimport { Wrapper, Points } from '../Pagination.styled';\n\nconst Desktop: React.FC<IPagination> = ({\n  contentPerPage,\n  arr,\n  prevPage,\n  page,\n  setPage,\n  gaps,\n  totalPages,\n  nextPage,\n  margin,\n}) => {\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"100%\"\n      padding=\"15px 10px\"\n      alignItems=\"center\"\n      margin={margin}\n    >\n      <Wrapper>\n        <Button\n          type=\"button\"\n          background=\"blue\"\n          borderRadius=\"10px\"\n          height=\"40px\"\n          width=\"40px\"\n          onClick={prevPage}\n          margin=\"0 10px 0 0\"\n        >\n          <IconSwitcher\n            name=\"arrowLeft\"\n            size=\"16px\"\n            fill=\"var(--white-color)\"\n          />\n        </Button>\n\n        {page === 1 ? (\n          <Button\n            type=\"button\"\n            background=\"green\"\n            borderRadius=\"10px\"\n            height=\"40px\"\n            width=\"40px\"\n            onClick={() => setPage(1)}\n            margin=\"0 10px 0 0\"\n          >\n            1\n          </Button>\n        ) : (\n          <Button\n            type=\"button\"\n            background=\"blue\"\n            borderRadius=\"10px\"\n            height=\"40px\"\n            width=\"40px\"\n            onClick={() => setPage(1)}\n            margin=\"0 10px 0 0\"\n          >\n            1\n          </Button>\n        )}\n\n        {gaps.before ? <Points>...</Points> : null}\n        {gaps.paginationGroup.map((el: number) =>\n          page === el ? (\n            <Button\n              type=\"button\"\n              background=\"green\"\n              borderRadius=\"10px\"\n              height=\"40px\"\n              width=\"40px\"\n              onClick={() => setPage(el)}\n              margin=\"0 10px 0 0\"\n            >\n              {el}\n            </Button>\n          ) : (\n            <Button\n              type=\"button\"\n              background=\"blue\"\n              borderRadius=\"10px\"\n              height=\"40px\"\n              width=\"40px\"\n              onClick={() => setPage(el)}\n              margin=\"0 10px 0 0\"\n            >\n              {el}\n            </Button>\n          ),\n        )}\n        {gaps.after ? <Points>...</Points> : null}\n\n        {page === totalPages ? (\n          <Button\n            type=\"button\"\n            background=\"green\"\n            borderRadius=\"10px\"\n            height=\"40px\"\n            width=\"40px\"\n            onClick={() => setPage(totalPages)}\n            margin=\"0 10px 0 0\"\n          >\n            {totalPages}\n          </Button>\n        ) : (\n          <Button\n            type=\"button\"\n            background=\"blue\"\n            borderRadius=\"10px\"\n            height=\"40px\"\n            width=\"40px\"\n            onClick={() => setPage(totalPages)}\n            margin=\"0 10px 0 0\"\n          >\n            {totalPages}\n          </Button>\n        )}\n\n        <Button\n          type=\"button\"\n          background=\"blue\"\n          borderRadius=\"10px\"\n          height=\"40px\"\n          width=\"40px\"\n          onClick={nextPage}\n        >\n          <IconSwitcher\n            name=\"arrowRight\"\n            size=\"16px\"\n            fill=\"var(--white-color)\"\n          />\n        </Button>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Desktop;\n","import Media from 'react-media';\nimport screenWidth from 'helpers/screenWidth';\nimport { IPagination } from 'types/IPagination';\n\nimport Mobile from './Responsiv/Mobile';\nimport Desktop from './Responsiv/Desktop';\n\nconst Pagination: React.FC<IPagination> = ({\n  contentPerPage,\n  arr,\n  prevPage,\n  page,\n  setPage,\n  gaps,\n  totalPages,\n  nextPage,\n  margin,\n}) => {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 1439px)',\n        large: `(min-width: ${screenWidth.desktop})`,\n      }}\n    >\n      {matches => (\n        <>\n          {matches.small && (\n            <Mobile\n              contentPerPage={contentPerPage}\n              arr={arr}\n              prevPage={prevPage}\n              page={page}\n              setPage={setPage}\n              gaps={gaps}\n              totalPages={totalPages}\n              nextPage={nextPage}\n              margin={margin}\n            />\n          )}\n          {matches.large && (\n            <Desktop\n              contentPerPage={contentPerPage}\n              arr={arr}\n              prevPage={prevPage}\n              page={page}\n              setPage={setPage}\n              gaps={gaps}\n              totalPages={totalPages}\n              nextPage={nextPage}\n              margin={margin}\n            />\n          )}\n        </>\n      )}\n    </Media>\n  );\n};\n\nexport default Pagination;\n","const dateFormatting = (date: string) => {\n  if (date) {\n    return date.slice(0, 19).replace('T', ' ');\n  }\n};\n\nexport default dateFormatting;\n","import { useState, useEffect } from 'react';\nimport { IGap, IusePagination } from 'types/IPagination';\n\nconst usePagination = ({ contentPerPage, count }: IusePagination) => {\n  const [page, setPage] = useState(1);\n  const [gaps, setGaps] = useState<IGap>({\n    before: false,\n    paginationGroup: [],\n    after: true,\n  });\n  const [pagesInBetween, setPagesInBetween] = useState<number[]>([]);\n\n  const pageCount = Math.ceil(count / contentPerPage);\n  const lastContentIndex = page * contentPerPage;\n  const firstContentIndex = lastContentIndex - contentPerPage;\n\n  useEffect(() => {\n    if (pageCount > 2) {\n      const temp = new Array(pageCount - 2).fill(1).map((_, i) => i + 2);\n      setPagesInBetween(temp);\n    }\n  }, [pageCount]);\n\n  useEffect(() => {\n    const currentLocation = pagesInBetween.indexOf(page);\n    let paginationGroup = [];\n    let before = false;\n    let after = false;\n\n    if (page === 1) {\n      paginationGroup = pagesInBetween.slice(0, 3);\n    } else if (\n      page === pageCount ||\n      page === pageCount - 1 ||\n      page === pageCount - 2\n    ) {\n      paginationGroup = pagesInBetween.slice(-3, pageCount);\n    } else if (page === 2) {\n      paginationGroup = pagesInBetween.slice(\n        currentLocation,\n        currentLocation + 3,\n      );\n    } else {\n      paginationGroup = [page - 1, page, page + 1];\n    }\n\n    if (pageCount <= 5) {\n      before = false;\n      after = false;\n    } else {\n      before = false;\n      after = false;\n      if (paginationGroup[0] > 2) {\n        before = true;\n      }\n\n      if (paginationGroup[2] < pageCount - 1) {\n        after = true;\n      }\n    }\n    setGaps({ paginationGroup, before, after });\n  }, [page, pageCount, pagesInBetween]);\n\n  const changePage = (direction: boolean) => {\n    setPage(state => {\n      if (direction) {\n        if (state === pageCount) {\n          return state;\n        }\n        return state + 1;\n      } else {\n        if (state === 1) {\n          return state;\n        }\n        return state - 1;\n      }\n    });\n  };\n\n  const setPageSAFE = (num: number) => {\n    if (num > pageCount) {\n      setPage(pageCount);\n    } else if (num < 1) {\n      setPage(1);\n    } else {\n      setPage(num);\n    }\n  };\n\n  return {\n    totalPages: pageCount,\n    nextPage: () => changePage(true),\n    prevPage: () => changePage(false),\n    setPage: setPageSAFE,\n    firstContentIndex,\n    lastContentIndex,\n    page,\n    gaps,\n  };\n};\n\nexport default usePagination;\n","import { useEffect, useState } from 'react';\nimport { useAppDispatch } from 'hooks/useAppDispatch';\nimport operations from 'redux/bets/betsOperations';\n\nimport { IGetAllBetsRes, IBets } from 'types/IBetsApi';\n\nconst useBetList = () => {\n  const [bets, setBets] = useState<IBets[] | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(operations.getAllBets())\n      .then(data => {\n        const betsArr = (data.payload as IGetAllBetsRes).bets;\n        setBets(betsArr);\n      })\n      .catch(error => console.log(error));\n  }, [dispatch]);\n\n  return { bets };\n};\n\nexport default useBetList;\n","import styled from '@emotion/styled';\nimport screenWidth from 'helpers/screenWidth';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport const Title = styled.h1`\n  text-transform: uppercase;\n  font-size: 30px;\n  font-weight: 900;\n\n  margin-bottom: 40px;\n`;\n\nexport const CategoriesList = styled.ul`\n  font-weight: 900;\n  font-size: 18px;\n\n  padding: 20px 15px 50px 15px;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nexport const CategoriesItem = styled.li`\n  text-transform: uppercase;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    width: 150px;\n    text-transform: uppercase;\n    text-align: center;\n  }\n`;\n\nexport const List = styled.ul`\n  width: 100%;\n  margin-bottom: 30px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  flex-direction: column;\n\n  padding: 20px 15px;\n\n  :nth-of-type(odd) {\n    background-color: var(--white-transparent);\n    border-radius: 8px;\n  }\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n  }\n`;\n\nexport const Column = styled.div`\n  display: flex;\n  justify-content: flex-start;\n\n  width: 150px;\n  text-align: center;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    align-items: center;\n    justify-content: center;\n  }\n`;\n\nexport const IsWon = styled.div<{ isWon: boolean }>`\n  width: 16px;\n  height: 16px;\n\n  border-radius: 50%;\n  background-color: ${({ isWon }) =>\n    isWon ? 'var(--green-color)' : 'var(--red-color)'};\n`;\n","import useBetList from 'hooks/useBetList';\nimport usePagination from 'hooks/usePagination';\nimport dateFormatting from 'helpers/dateFormatting';\n\nimport Container from 'components/InterfaceElements/Container';\nimport Pagination from 'components/InterfaceElements/Pagination';\n\nimport {\n  Wrapper,\n  Title,\n  CategoriesList,\n  CategoriesItem,\n  List,\n  Item,\n  Column,\n  IsWon,\n} from '../BetLlist.styled';\n\nconst Mobile: React.FC<{}> = () => {\n  const { bets } = useBetList();\n\n  const {\n    firstContentIndex,\n    gaps,\n    lastContentIndex,\n    nextPage,\n    page,\n    prevPage,\n    setPage,\n    totalPages,\n  } = usePagination({ contentPerPage: 10, count: bets ? bets?.length : 0 });\n\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"300px\"\n      padding=\"10px\"\n      margin=\"0 0 80px 0\"\n    >\n      <Wrapper>\n        <Title>List of bets</Title>\n        <CategoriesList>\n          <CategoriesItem>creating date</CategoriesItem>\n          <CategoriesItem>type</CategoriesItem>\n          <CategoriesItem>amount</CategoriesItem>\n          <CategoriesItem>coeffient</CategoriesItem>\n          <CategoriesItem>is won</CategoriesItem>\n          <CategoriesItem>wining amount</CategoriesItem>\n        </CategoriesList>\n      </Wrapper>\n\n      <List>\n        {bets &&\n          bets\n            .slice(firstContentIndex, lastContentIndex)\n            .map(\n              ({\n                _id,\n                createdAt,\n                type,\n                betAmount,\n                coefficient,\n                isWon,\n                winningAmount,\n              }) => {\n                return (\n                  <Item key={_id}>\n                    <Column>\n                      <p>{dateFormatting(createdAt)}</p>\n                    </Column>\n                    <Column>\n                      <p>{type}</p>\n                    </Column>\n                    <Column>\n                      <p>{`${betAmount} $`}</p>\n                    </Column>\n                    <Column>\n                      <p>{coefficient}</p>\n                    </Column>\n                    <Column>\n                      <IsWon isWon={isWon} />\n                    </Column>\n                    <Column>\n                      <p>{`${winningAmount} $`}</p>\n                    </Column>\n                  </Item>\n                );\n              },\n            )}\n      </List>\n\n      {bets && bets.length > 0 && (\n        <Pagination\n          contentPerPage={3}\n          arr={bets}\n          gaps={gaps}\n          nextPage={nextPage}\n          page={page}\n          prevPage={prevPage}\n          setPage={setPage}\n          totalPages={totalPages}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Mobile;\n","import useBetList from 'hooks/useBetList';\nimport usePagination from 'hooks/usePagination';\nimport dateFormatting from 'helpers/dateFormatting';\n\nimport Container from 'components/InterfaceElements/Container';\nimport Pagination from 'components/InterfaceElements/Pagination';\n\nimport {\n  Wrapper,\n  Title,\n  CategoriesList,\n  CategoriesItem,\n  List,\n  Item,\n  Column,\n  IsWon,\n} from '../BetLlist.styled';\n\nconst Tablet: React.FC<{}> = () => {\n  const { bets } = useBetList();\n\n  const {\n    firstContentIndex,\n    gaps,\n    lastContentIndex,\n    nextPage,\n    page,\n    prevPage,\n    setPage,\n    totalPages,\n  } = usePagination({ contentPerPage: 10, count: bets ? bets?.length : 0 });\n\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"680px\"\n      padding=\"40px 10px 10px 10px\"\n      margin=\"50px 0 80px 0\"\n    >\n      <Wrapper>\n        <Title>List of bets</Title>\n        <CategoriesList>\n          <CategoriesItem>creating date</CategoriesItem>\n          <CategoriesItem>type</CategoriesItem>\n          <CategoriesItem>amount</CategoriesItem>\n          <CategoriesItem>coeffient</CategoriesItem>\n          <CategoriesItem>is won</CategoriesItem>\n          <CategoriesItem>wining amount</CategoriesItem>\n        </CategoriesList>\n      </Wrapper>\n\n      <List>\n        {bets &&\n          bets\n            .slice(firstContentIndex, lastContentIndex)\n            .map(\n              ({\n                _id,\n                createdAt,\n                type,\n                betAmount,\n                coefficient,\n                isWon,\n                winningAmount,\n              }) => {\n                return (\n                  <Item key={_id}>\n                    <Column>\n                      <p>{dateFormatting(createdAt)}</p>\n                    </Column>\n                    <Column>\n                      <p>{type}</p>\n                    </Column>\n                    <Column>\n                      <p>{`${betAmount} $`}</p>\n                    </Column>\n                    <Column>\n                      <p>{coefficient}</p>\n                    </Column>\n                    <Column>\n                      <IsWon isWon={isWon} />\n                    </Column>\n                    <Column>\n                      <p>{`${winningAmount} $`}</p>\n                    </Column>\n                  </Item>\n                );\n              },\n            )}\n      </List>\n\n      {bets && bets.length > 0 && (\n        <Pagination\n          contentPerPage={3}\n          arr={bets}\n          gaps={gaps}\n          nextPage={nextPage}\n          page={page}\n          prevPage={prevPage}\n          setPage={setPage}\n          totalPages={totalPages}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Tablet;\n","import useBetList from 'hooks/useBetList';\nimport usePagination from 'hooks/usePagination';\nimport dateFormatting from 'helpers/dateFormatting';\n\nimport Container from 'components/InterfaceElements/Container';\nimport Pagination from 'components/InterfaceElements/Pagination';\n\nimport {\n  Wrapper,\n  Title,\n  CategoriesList,\n  CategoriesItem,\n  List,\n  Item,\n  Column,\n  IsWon,\n} from '../BetLlist.styled';\n\nconst Desktop: React.FC<{}> = () => {\n  const { bets } = useBetList();\n\n  const {\n    firstContentIndex,\n    gaps,\n    lastContentIndex,\n    nextPage,\n    page,\n    prevPage,\n    setPage,\n    totalPages,\n  } = usePagination({ contentPerPage: 10, count: bets ? bets?.length : 0 });\n\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"1050px\"\n      padding=\"70px 50px\"\n      margin=\"50px\"\n    >\n      <Wrapper>\n        <Title>List of bets</Title>\n        <CategoriesList>\n          <CategoriesItem>creating date</CategoriesItem>\n          <CategoriesItem>type</CategoriesItem>\n          <CategoriesItem>amount</CategoriesItem>\n          <CategoriesItem>coeffient</CategoriesItem>\n          <CategoriesItem>is won</CategoriesItem>\n          <CategoriesItem>wining amount</CategoriesItem>\n        </CategoriesList>\n      </Wrapper>\n\n      <List>\n        {bets &&\n          bets\n            .slice(firstContentIndex, lastContentIndex)\n            .map(\n              ({\n                _id,\n                createdAt,\n                type,\n                betAmount,\n                coefficient,\n                isWon,\n                winningAmount,\n              }) => {\n                return (\n                  <Item key={_id}>\n                    <Column>\n                      <p>{dateFormatting(createdAt)}</p>\n                    </Column>\n                    <Column>\n                      <p>{type}</p>\n                    </Column>\n                    <Column>\n                      <p>{`${betAmount} $`}</p>\n                    </Column>\n                    <Column>\n                      <p>{coefficient}</p>\n                    </Column>\n                    <Column>\n                      <IsWon isWon={isWon} />\n                    </Column>\n                    <Column>\n                      <p>{`${winningAmount} $`}</p>\n                    </Column>\n                  </Item>\n                );\n              },\n            )}\n      </List>\n\n      {bets && bets.length > 0 && (\n        <Pagination\n          contentPerPage={3}\n          arr={bets}\n          gaps={gaps}\n          nextPage={nextPage}\n          page={page}\n          prevPage={prevPage}\n          setPage={setPage}\n          totalPages={totalPages}\n        />\n      )}\n    </Container>\n  );\n};\n\nexport default Desktop;\n","import Media from 'react-media';\nimport screenWidth from 'helpers/screenWidth';\n\nimport Mobile from './Responsiv/Mobile';\nimport Tablet from './Responsiv/Tablet';\nimport Desktop from './Responsiv/Desktop';\n\nconst BetLlist: React.FC<{}> = () => {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 767px)',\n        medium: `(min-width: ${screenWidth.tablet}) and (max-width: 1439px)`,\n        large: `(min-width: ${screenWidth.desktop})`,\n      }}\n    >\n      {matches => (\n        <>\n          {matches.small && <Mobile />}\n          {matches.medium && <Tablet />}\n          {matches.large && <Desktop />}\n        </>\n      )}\n    </Media>\n  );\n};\n\nexport default BetLlist;\n","import BetLlist from 'components/BetLlist';\n\nconst BetLlistPage: React.FC<{}> = () => {\n  return <BetLlist />;\n};\n\nexport default BetLlistPage;\n"],"names":["Wrapper","styled","Points","screenWidth","contentPerPage","arr","prevPage","page","setPage","gaps","totalPages","nextPage","margin","Container","type","width","padding","alignItems","Button","background","borderRadius","height","onClick","IconSwitcher","name","size","fill","before","paginationGroup","map","el","after","queries","small","large","matches","date","slice","replace","count","useState","setGaps","pagesInBetween","setPagesInBetween","pageCount","Math","ceil","lastContentIndex","firstContentIndex","useEffect","temp","Array","_","i","currentLocation","indexOf","changePage","direction","state","num","bets","setBets","dispatch","useAppDispatch","operations","then","data","betsArr","payload","catch","error","console","log","Title","CategoriesList","CategoriesItem","List","Item","Column","IsWon","isWon","useBetList","usePagination","length","_id","createdAt","betAmount","coefficient","winningAmount","dateFormatting","Pagination","medium"],"sourceRoot":""}