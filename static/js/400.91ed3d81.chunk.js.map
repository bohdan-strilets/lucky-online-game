{"version":3,"file":"static/js/400.91ed3d81.chunk.js","mappings":"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","sources":["components/InterfaceElements/EntryField/EntryField.styled.ts","components/InterfaceElements/EntryField/EntryField.tsx","helpers/validationSchemas/resetPasswordSchema.ts","hooks/useResetPassword.ts","components/Auth/ResetPasswordForm/ResetPasswordForm.styled.ts","components/Auth/ResetPasswordForm/ResetPasswordForm.tsx","pages/ResetPasswordPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Field, ErrorMessage } from 'formik';\nimport { IWrapperStyled, IInputStyled } from 'types/IEntryField';\n\nexport const Wrapper = styled.label<IWrapperStyled>`\n  display: flex;\n  flex-direction: column;\n  margin: ${({ margin }) => (margin ? margin : '')};\n`;\n\nexport const Label = styled.span`\n  font-size: 15px;\n  text-transform: uppercase;\n  color: var(--brown-color);\n\n  margin-bottom: 6px;\n`;\n\nexport const Input = styled(Field)<IInputStyled>`\n  width: ${({ width }) => (width ? width : '')};\n  height: ${({ height }) => (height ? height : '')};\n  padding: 0 15px;\n\n  font-family: inherit;\n  font-weight: 700;\n  font-size: 19px;\n\n  color: var(--brown-color);\n  background: var(--white-transparent);\n  border: 2px solid var(--brown-color);\n  border-radius: 8px;\n  outline: none;\n\n  :focus {\n    border: 2px solid rgba(105, 74, 4, 0.7);\n  }\n\n  ::placeholder {\n    font-size: 19px;\n    color: var(--brown-color);\n    opacity: 0.5;\n  }\n`;\n\nexport const Error = styled(ErrorMessage)`\n  margin-top: 5px;\n  color: red;\n`;\n","import { IEntryFieldState } from 'types/IEntryField';\nimport { Wrapper, Label, Input, Error } from './EntryField.styled';\n\nconst EntryField: React.FC<IEntryFieldState> = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  required,\n  placeholder,\n  width,\n  height,\n  margin,\n}) => {\n  return (\n    <Wrapper margin={margin}>\n      <Label>{label}</Label>\n      <Input\n        type={type}\n        name={name}\n        value={value}\n        onChange={onChange}\n        required={required}\n        placeholder={placeholder}\n        width={width}\n        height={height}\n      />\n      <Error name={name} component=\"div\" />\n    </Wrapper>\n  );\n};\n\nexport default EntryField;\n","import * as yup from 'yup';\n\nconst resetPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n});\n\nconst restorePasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n  passwordAgain: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match'),\n});\n\nexport { resetPasswordSchema, restorePasswordSchema };\n","import { useAppDispatch } from 'hooks/useAppDispatch';\nimport { useNavigate } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport operations from 'redux/user/userOperations';\n\nimport { IResetPasswordData } from 'types/IProfile';\nimport { restorePasswordSchema } from 'helpers/validationSchemas/resetPasswordSchema';\nimport { IResetPasswordRes } from 'types/IUserRessponse';\n\nconst useResetPassword = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    email: '',\n    password: '',\n    passwordAgain: '',\n  };\n\n  const resetPassword = async (values: IResetPasswordData) => {\n    const data = { email: values.email, password: values.password };\n    const res = await dispatch(operations.resetPassword(data));\n\n    if ((res.payload as IResetPasswordRes).status === 'ok') {\n      navigate('/sign-in');\n      toast.success('Password changed successfully. Try logging in again.');\n    }\n  };\n\n  return { initialValues, resetPassword, restorePasswordSchema };\n};\n\nexport default useResetPassword;\n","import styled from '@emotion/styled';\n\nexport const Title = styled.h1`\n  font-weight: 900;\n  font-size: 42px;\n  text-transform: uppercase;\n  text-align: center;\n`;\n\nexport const Tuple = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 30px;\n  margin-top: 30px;\n`;\n","import useResetPassword from 'hooks/useResetPassword';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { Title, Tuple } from './ResetPasswordForm.styled';\n\nconst ResetPasswordForm: React.FC<{}> = () => {\n  const { resetPassword, initialValues, restorePasswordSchema } =\n    useResetPassword();\n\n  return (\n    <Container type=\"transparent\" width=\"856px\" padding=\"50px\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={resetPassword}\n        validationSchema={restorePasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Title>Password recovery</Title>\n\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"100%\"\n            />\n\n            <Tuple>\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n\n              <EntryField\n                label=\"password again\"\n                type=\"password\"\n                name=\"passwordAgain\"\n                value={values.passwordAgain}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"756px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              Reset password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default ResetPasswordForm;\n","import ResetPasswordForm from 'components/Auth/ResetPasswordForm';\n\nconst ResetPasswordPage: React.FC<{}> = () => {\n  return <ResetPasswordForm />;\n};\n\nexport default ResetPasswordPage;\n"],"names":["Wrapper","styled","margin","Label","Input","Field","width","height","Error","ErrorMessage","label","type","name","value","onChange","required","placeholder","component","resetPasswordSchema","yup","shape","email","restorePasswordSchema","password","min","max","passwordAgain","oneOf","dispatch","useAppDispatch","navigate","useNavigate","resetPassword","values","data","operations","payload","status","toast","initialValues","Title","Tuple","useResetPassword","Container","padding","onSubmit","validationSchema","handleSubmit","handleChange","EntryField","Button","background","borderRadius","shadow"],"sourceRoot":""}