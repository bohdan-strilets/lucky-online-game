{"version":3,"file":"static/js/258.2de37c42.chunk.js","mappings":"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","sources":["helpers/validationSchemas/resetPasswordSchema.ts","hooks/useResetPassword.ts","components/Auth/ResetPasswordForm/ResetPasswordForm.styled.ts","components/Auth/ResetPasswordForm/Responsiv/Mobile.tsx","components/Auth/ResetPasswordForm/Responsiv/Tablet.tsx","components/Auth/ResetPasswordForm/Responsiv/Desktop.tsx","components/Auth/ResetPasswordForm/ResetPasswordForm.tsx","pages/ResetPasswordPage.tsx"],"sourcesContent":["import * as yup from 'yup';\n\nconst resetPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n});\n\nconst restorePasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n  passwordAgain: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match'),\n});\n\nexport { resetPasswordSchema, restorePasswordSchema };\n","import { useAppDispatch } from 'hooks/useAppDispatch';\nimport { useNavigate } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport operations from 'redux/user/userOperations';\n\nimport { IResetPasswordData } from 'types/IProfile';\nimport { restorePasswordSchema } from 'helpers/validationSchemas/resetPasswordSchema';\nimport { IResetPasswordRes } from 'types/IUserRessponse';\n\nconst useResetPassword = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    email: '',\n    password: '',\n    passwordAgain: '',\n  };\n\n  const resetPassword = async (values: IResetPasswordData) => {\n    const data = { email: values.email, password: values.password };\n    const res = await dispatch(operations.resetPassword(data));\n\n    if ((res.payload as IResetPasswordRes).status === 'ok') {\n      navigate('/sign-in');\n      toast.success('Password changed successfully. Try logging in again.');\n    }\n  };\n\n  return { initialValues, resetPassword, restorePasswordSchema };\n};\n\nexport default useResetPassword;\n","import styled from '@emotion/styled';\nimport screenWidth from 'helpers/screenWidth';\n\nexport const Title = styled.h1`\n  font-weight: 900;\n  font-size: 42px;\n  text-transform: uppercase;\n  text-align: center;\n\n  margin-bottom: 15px;\n`;\n\nexport const Tuple = styled.div`\n  margin-bottom: 30px;\n  margin-top: 30px;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n","import useResetPassword from 'hooks/useResetPassword';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { Title, Tuple } from '../ResetPasswordForm.styled';\n\nconst Mobile: React.FC<{}> = () => {\n  const { resetPassword, initialValues, restorePasswordSchema } =\n    useResetPassword();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"300px\"\n      padding=\"50px\"\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={resetPassword}\n        validationSchema={restorePasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Title>Password recovery</Title>\n\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"250px\"\n            />\n\n            <Tuple>\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"250px\"\n              />\n\n              <EntryField\n                label=\"password again\"\n                type=\"password\"\n                name=\"passwordAgain\"\n                value={values.passwordAgain}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"250px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"250px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              Reset password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default Mobile;\n","import useResetPassword from 'hooks/useResetPassword';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { Title, Tuple } from '../ResetPasswordForm.styled';\n\nconst Tablet: React.FC<{}> = () => {\n  const { resetPassword, initialValues, restorePasswordSchema } =\n    useResetPassword();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"560px\"\n      padding=\"50px\"\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={resetPassword}\n        validationSchema={restorePasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Title>Password recovery</Title>\n\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"100%\"\n            />\n\n            <Tuple>\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"230px\"\n              />\n\n              <EntryField\n                label=\"password again\"\n                type=\"password\"\n                name=\"passwordAgain\"\n                value={values.passwordAgain}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"230px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"500px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              Reset password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default Tablet;\n","import useResetPassword from 'hooks/useResetPassword';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\n\nimport { Title, Tuple } from '../ResetPasswordForm.styled';\n\nconst Desktop: React.FC<{}> = () => {\n  const { resetPassword, initialValues, restorePasswordSchema } =\n    useResetPassword();\n\n  return (\n    <Container type=\"transparent\" width=\"856px\" padding=\"50px\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={resetPassword}\n        validationSchema={restorePasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Title>Password recovery</Title>\n\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"100%\"\n            />\n\n            <Tuple>\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n\n              <EntryField\n                label=\"password again\"\n                type=\"password\"\n                name=\"passwordAgain\"\n                value={values.passwordAgain}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"756px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              Reset password\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Container>\n  );\n};\n\nexport default Desktop;\n","import Media from 'react-media';\nimport screenWidth from 'helpers/screenWidth';\n\nimport Mobile from './Responsiv/Mobile';\nimport Tablet from './Responsiv/Tablet';\nimport Desktop from './Responsiv/Desktop';\n\nconst ResetPasswordForm: React.FC<{}> = () => {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 767px)',\n        medium: `(min-width: ${screenWidth.tablet}) and (max-width: 1439px)`,\n        large: `(min-width: ${screenWidth.desktop})`,\n      }}\n    >\n      {matches => (\n        <>\n          {matches.small && <Mobile />}\n          {matches.medium && <Tablet />}\n          {matches.large && <Desktop />}\n        </>\n      )}\n    </Media>\n  );\n};\n\nexport default ResetPasswordForm;\n","import ResetPasswordForm from 'components/Auth/ResetPasswordForm';\n\nconst ResetPasswordPage: React.FC<{}> = () => {\n  return <ResetPasswordForm />;\n};\n\nexport default ResetPasswordPage;\n"],"names":["resetPasswordSchema","yup","shape","email","required","restorePasswordSchema","password","min","max","passwordAgain","oneOf","dispatch","useAppDispatch","navigate","useNavigate","resetPassword","values","data","operations","payload","status","toast","initialValues","Title","styled","Tuple","screenWidth","useResetPassword","Container","type","alignItems","width","padding","onSubmit","validationSchema","handleSubmit","handleChange","EntryField","label","name","value","onChange","placeholder","height","Button","background","borderRadius","shadow","queries","small","medium","large","matches"],"sourceRoot":""}