{"version":3,"file":"static/js/869.ca86588b.chunk.js","mappings":"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","sources":["components/Auth/AuthNav/AuthNav.styled.ts","components/Auth/AuthNav/AuthNav.tsx","helpers/validationSchemas/resetPasswordSchema.ts","helpers/validationSchemas/signinSchema.ts","hooks/useLogin.ts","hooks/useResetPasswordMail.ts","components/Modal/ResetPassword/ResetPassword.styled.ts","components/Modal/ResetPassword/ResetPassword.tsx","components/Auth/SigninForm/SigninForm.styled.ts","components/Auth/SigninForm/Responsiv/Mobile.tsx","components/Auth/SigninForm/Responsiv/Tablet.tsx","components/Auth/SigninForm/Responsiv/Desktop.tsx","components/Auth/SigninForm/SigninForm.tsx","pages/SigninPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport screenWidth from 'helpers/screenWidth';\n\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin-bottom: 30px;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    flex-direction: row;\n    justify-content: center;\n  }\n`;\n\nexport const Item = styled.li`\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    margin-right: 30px;\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n`;\n\nexport const AuthLink = styled(NavLink)`\n  font-weight: 900;\n  font-size: 30px;\n  text-transform: uppercase;\n\n  color: var(--brown-color);\n\n  &.active {\n    opacity: 0.7;\n  }\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    font-size: 42px;\n  }\n`;\n","import useSound from 'use-sound';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport { getSoundOff } from 'redux/options/optionsSelectors';\n\nimport sounds from 'sounds/sounds.mp3';\nimport sprite from 'sounds/sprite';\n\nimport { List, Item, AuthLink } from './AuthNav.styled';\n\nconst AuthNav: React.FC<{}> = () => {\n  const soundOff = useAppSelector(getSoundOff);\n  const [play] = useSound(sounds, { sprite: sprite, soundEnabled: soundOff });\n\n  return (\n    <List>\n      <Item>\n        <AuthLink to=\"/sign-in\" onClick={() => play({ id: 'counter_click' })}>\n          Sign in\n        </AuthLink>\n      </Item>\n      <Item>\n        <AuthLink to=\"/sign-up\" onClick={() => play({ id: 'counter_click' })}>\n          Sign up\n        </AuthLink>\n      </Item>\n    </List>\n  );\n};\n\nexport default AuthNav;\n","import * as yup from 'yup';\n\nconst resetPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n});\n\nconst restorePasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n  passwordAgain: yup\n    .string()\n    .oneOf([yup.ref('password')], 'Passwords must match'),\n});\n\nexport { resetPasswordSchema, restorePasswordSchema };\n","import * as yup from 'yup';\n\nconst signinSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('The email address must be valid and existing.')\n    .required('The email field is required and cannot be empty.'),\n  password: yup\n    .string()\n    .min(6, 'The minimum password length must be 6 characters.')\n    .max(12, 'The maximum password length must not exceed 12 characters.')\n    .required('The password field is required and cannot be empty.'),\n});\n\nexport default signinSchema;\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAppDispatch } from 'hooks/useAppDispatch';\nimport useSound from 'use-sound';\nimport { useAppSelector } from 'hooks/useAppSelector';\nimport { getSoundOff } from 'redux/options/optionsSelectors';\n\nimport sounds from 'sounds/sounds.mp3';\nimport sprite from 'sounds/sprite';\nimport operations from 'redux/user/userOperations';\nimport { toast } from 'react-toastify';\n\nimport { ISigninData } from 'types/IProfile';\nimport { IAuthRes } from 'types/IUserRessponse';\nimport signinSchema from 'helpers/validationSchemas/signinSchema';\n\nconst useLogin = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const soundOff = useAppSelector(getSoundOff);\n  const [play] = useSound(sounds, { sprite: sprite, soundEnabled: soundOff });\n\n  const [showModalResetPassword, setShowModalResetPassword] = useState(false);\n\n  const initialValues = {\n    email: '',\n    password: '',\n    rememberMe: false,\n  };\n\n  const toogleModalResetPassword = () => {\n    setShowModalResetPassword(prevState => !prevState);\n    play({ id: 'counter_click' });\n  };\n\n  const login = async (values: ISigninData) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n\n    const res = await dispatch(operations.signin(user));\n\n    (res.payload as IAuthRes).status === 'ok'\n      ? navigate('/profile')\n      : toast.warning('Sorry something went wrong... Please try again.');\n  };\n\n  return {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  };\n};\n\nexport default useLogin;\n","import { useAppDispatch } from 'hooks/useAppDispatch';\nimport operations from 'redux/user/userOperations';\nimport { useNavigate } from 'react-router-dom';\n\nimport { toast } from 'react-toastify';\nimport { IEditEmailData } from 'types/IProfile';\nimport { IResetPasswordRes } from 'types/IUserRessponse';\n\nconst useResetPasswordMail = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const initialValues = {\n    email: '',\n  };\n\n  const onSubmit = async (values: IEditEmailData) => {\n    const res = await dispatch(operations.sendPasswordResetEmail(values));\n\n    if ((res.payload as IResetPasswordRes).status === 'ok') {\n      navigate('/');\n      toast.success(\n        'Email sent successfully. Please check your inbox for a link to reset your password.',\n      );\n    }\n  };\n\n  return { initialValues, onSubmit };\n};\n\nexport default useResetPasswordMail;\n","import styled from '@emotion/styled';\n\nexport const Text = styled.p`\n  text-align: center;\n  margin-bottom: 40px;\n`;\n","import useResetPasswordMail from 'hooks/useResetPasswordMail';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\n\nimport { resetPasswordSchema } from 'helpers/validationSchemas/resetPasswordSchema';\nimport { Text } from './ResetPassword.styled';\n\nconst ResetPassword: React.FC<{}> = () => {\n  const { initialValues, onSubmit } = useResetPasswordMail();\n\n  return (\n    <>\n      <Text>\n        Enter the email address to which the account is registered. We will send\n        an email to reset and reset your password.\n      </Text>\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validationSchema={resetPasswordSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <EntryField\n              label=\"email\"\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"Enter your e-mail\"\n              required={true}\n              height=\"50px\"\n              width=\"100%\"\n              margin=\"0 0 30px 0\"\n            />\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"100%\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n            >\n              send\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ResetPassword;\n","import styled from '@emotion/styled';\nimport screenWidth from 'helpers/screenWidth';\n\nexport const Tuple = styled.div`\n  margin-bottom: 30px;\n  margin-top: 30px;\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n`;\n\nexport const StyledLink = styled.button`\n  font-family: inherit;\n  font-size: 14px;\n\n  border: none;\n  background-color: transparent;\n  color: var(--green-color);\n\n  cursor: pointer;\n  transition: opacity var(--hover-effect);\n\n  :hover,\n  :focus {\n    opacity: 0.7;\n  }\n\n  @media screen and (min-width: ${screenWidth.tablet}) {\n    font-size: 19px;\n  }\n`;\n","import useLogin from 'hooks/useLogin';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\nimport AuthNav from '../../AuthNav';\nimport Modal from 'components/Modal';\nimport ResetPassword from 'components/Modal/ResetPassword';\n\nimport { Tuple, StyledLink } from '../SigninForm.styled';\n\nconst Mobile: React.FC<{}> = () => {\n  const {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  } = useLogin();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"300px\"\n      padding=\"50px\"\n    >\n      <AuthNav />\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={login}\n        validationSchema={signinSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Tuple>\n              <EntryField\n                label=\"email\"\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"Enter your e-mail\"\n                required={true}\n                height=\"50px\"\n                width=\"280px\"\n                margin=\"0 0 25px 0\"\n              />\n\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"280px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"100%\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n              onClick={() => play({ id: 'counter_click' })}\n            >\n              Sign in\n            </Button>\n\n            <Tuple>\n              <StyledLink type=\"button\" onClick={toogleModalResetPassword}>\n                Lost your password?\n              </StyledLink>\n            </Tuple>\n          </Form>\n        )}\n      </Formik>\n\n      {showModalResetPassword && (\n        <Modal title=\"Reset the password\" onClose={toogleModalResetPassword}>\n          <ResetPassword />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default Mobile;\n","import useLogin from 'hooks/useLogin';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\nimport AuthNav from '../../AuthNav';\nimport Modal from 'components/Modal';\nimport ResetPassword from 'components/Modal/ResetPassword';\n\nimport { Tuple, StyledLink } from '../SigninForm.styled';\n\nconst Tablet: React.FC<{}> = () => {\n  const {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  } = useLogin();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"560px\"\n      padding=\"50px\"\n    >\n      <AuthNav />\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={login}\n        validationSchema={signinSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Tuple>\n              <EntryField\n                label=\"email\"\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"Enter your e-mail\"\n                required={true}\n                height=\"50px\"\n                width=\"250px\"\n              />\n\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"250px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"520px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n              onClick={() => play({ id: 'counter_click' })}\n            >\n              Sign in\n            </Button>\n\n            <Tuple>\n              <StyledLink type=\"button\" onClick={toogleModalResetPassword}>\n                Lost your password?\n              </StyledLink>\n            </Tuple>\n          </Form>\n        )}\n      </Formik>\n\n      {showModalResetPassword && (\n        <Modal title=\"Reset the password\" onClose={toogleModalResetPassword}>\n          <ResetPassword />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default Tablet;\n","import useLogin from 'hooks/useLogin';\n\nimport { Formik, Form } from 'formik';\nimport EntryField from 'components/InterfaceElements/EntryField';\nimport Button from 'components/InterfaceElements/Button';\nimport Container from 'components/InterfaceElements/Container';\nimport AuthNav from '../../AuthNav';\nimport Modal from 'components/Modal';\nimport ResetPassword from 'components/Modal/ResetPassword';\n\nimport { Tuple, StyledLink } from '../SigninForm.styled';\n\nconst Desktop: React.FC<{}> = () => {\n  const {\n    initialValues,\n    login,\n    showModalResetPassword,\n    signinSchema,\n    toogleModalResetPassword,\n    play,\n  } = useLogin();\n\n  return (\n    <Container\n      type=\"transparent\"\n      alignItems=\"center\"\n      width=\"856px\"\n      padding=\"50px\"\n    >\n      <AuthNav />\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={login}\n        validationSchema={signinSchema}\n      >\n        {({ values, handleSubmit, handleChange }) => (\n          <Form onSubmit={handleSubmit}>\n            <Tuple>\n              <EntryField\n                label=\"email\"\n                type=\"email\"\n                name=\"email\"\n                value={values.email}\n                onChange={handleChange}\n                placeholder=\"Enter your e-mail\"\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n\n              <EntryField\n                label=\"password\"\n                type=\"password\"\n                name=\"password\"\n                value={values.password}\n                onChange={handleChange}\n                required={true}\n                height=\"50px\"\n                width=\"363px\"\n              />\n            </Tuple>\n\n            <Button\n              type=\"submit\"\n              background=\"green\"\n              width=\"756px\"\n              height=\"60px\"\n              borderRadius=\"50px\"\n              shadow\n              onClick={() => play({ id: 'counter_click' })}\n            >\n              Sign in\n            </Button>\n\n            <Tuple>\n              <StyledLink type=\"button\" onClick={toogleModalResetPassword}>\n                Lost your password?\n              </StyledLink>\n            </Tuple>\n          </Form>\n        )}\n      </Formik>\n\n      {showModalResetPassword && (\n        <Modal title=\"Reset the password\" onClose={toogleModalResetPassword}>\n          <ResetPassword />\n        </Modal>\n      )}\n    </Container>\n  );\n};\n\nexport default Desktop;\n","import Media from 'react-media';\nimport screenWidth from 'helpers/screenWidth';\n\nimport Mobile from './Responsiv/Mobile';\nimport Tablet from './Responsiv/Tablet';\nimport Desktop from './Responsiv/Desktop';\n\nconst SigninForm: React.FC<{}> = () => {\n  return (\n    <Media\n      queries={{\n        small: '(max-width: 767px)',\n        medium: `(min-width: ${screenWidth.tablet}) and (max-width: 1439px)`,\n        large: `(min-width: ${screenWidth.desktop})`,\n      }}\n    >\n      {matches => (\n        <>\n          {matches.small && <Mobile />}\n          {matches.medium && <Tablet />}\n          {matches.large && <Desktop />}\n        </>\n      )}\n    </Media>\n  );\n};\n\nexport default SigninForm;\n","import SigninForm from 'components/Auth/SigninForm';\n\nconst SigninPage: React.FC<{}> = () => {\n  return <SigninForm />;\n};\n\nexport default SigninPage;\n"],"names":["List","styled","screenWidth","Item","AuthLink","NavLink","soundOff","useAppSelector","getSoundOff","useSound","sounds","sprite","soundEnabled","play","to","onClick","id","resetPasswordSchema","yup","shape","email","required","restorePasswordSchema","password","min","max","passwordAgain","oneOf","dispatch","useAppDispatch","navigate","useNavigate","useState","showModalResetPassword","setShowModalResetPassword","login","values","user","operations","payload","status","toast","initialValues","rememberMe","signinSchema","toogleModalResetPassword","prevState","onSubmit","Text","useResetPasswordMail","validationSchema","handleSubmit","handleChange","EntryField","label","type","name","value","onChange","placeholder","height","width","margin","Button","background","borderRadius","shadow","Tuple","StyledLink","useLogin","Container","alignItems","padding","AuthNav","Modal","title","onClose","queries","small","medium","large","matches"],"sourceRoot":""}