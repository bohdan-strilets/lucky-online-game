{"version":3,"file":"static/js/742.cdae209b.chunk.js","mappings":"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","sources":["hooks/useNetProfit.ts","components/Statistics/Statistics.styled.ts","components/Statistics/Statistics.tsx","helpers/getDataForDiagram.ts","components/Statistics/Diagrams/Diagrams.styled.ts","components/Statistics/Diagrams/Diagrams.tsx","pages/StatisticsPage.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useGetStatisticsQuery } from 'redux/statistics/statisticsApi';\n\nconst useNetProfit = () => {\n  const [netto, setNetto] = useState(0);\n\n  const { data: statistics } = useGetStatisticsQuery();\n\n  useEffect(() => {\n    if (statistics !== undefined) {\n      const stats = statistics?.statistics;\n      const result = stats.moneyEarned - stats.moneySpent;\n      setNetto(result);\n    }\n  }, [statistics]);\n\n  return { netto };\n};\n\nexport default useNetProfit;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  width: 100%;\n`;\n\nexport const Title = styled.h1`\n  text-transform: uppercase;\n  font-size: 30px;\n  font-weight: 900;\n\n  margin-bottom: 40px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  margin-bottom: 30px;\n\n  border-bottom: 2px dotted var(--brown-color);\n\n  :last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const Text = styled.p`\n  font-size: 20px;\n  margin-bottom: 15px;\n`;\n","import { useEffect } from 'react';\nimport { useGetStatisticsQuery } from 'redux/statistics/statisticsApi';\nimport bankFormatting from 'helpers/bankFormatting';\nimport useNetProfit from 'hooks/useNetProfit';\n\nimport Container from 'components/InterfaceElements/Container';\nimport Loader from 'components/InterfaceElements/Loader';\n\nimport { Wrapper, Title, Item, Text } from './Statistics.styled';\n\nconst Statistics: React.FC<{}> = () => {\n  const { data: statistics, refetch, isFetching } = useGetStatisticsQuery();\n  const { netto } = useNetProfit();\n\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"1050px\"\n      padding=\"70px 50px\"\n      margin=\"50px\"\n    >\n      {isFetching && <Loader />}\n\n      {statistics?.statistics ? (\n        <Wrapper>\n          <Title>Statistics</Title>\n\n          <ul>\n            <Item>\n              <Text>Total bets placed:</Text>\n              <Text>{statistics.statistics.totalBets}</Text>\n            </Item>\n            <Item>\n              <Text>Bets that won:</Text>\n              <Text>{statistics.statistics.wonBets}</Text>\n            </Item>\n            <Item>\n              <Text>Lost bets:</Text>\n              <Text>{statistics.statistics.lostBets}</Text>\n            </Item>\n            <Item>\n              <Text>Total money earned:</Text>\n              <Text>\n                {`${bankFormatting(\n                  Number(statistics.statistics.moneyEarned).toFixed(2),\n                )} $`}\n              </Text>\n            </Item>\n            <Item>\n              <Text>Total money spent:</Text>\n              <Text>\n                {`${bankFormatting(\n                  Number(statistics.statistics.moneySpent).toFixed(2),\n                )} $`}\n              </Text>\n            </Item>\n            <Item>\n              <Text>Net profit amounted to:</Text>\n              <Text>{`${bankFormatting(Number(netto).toFixed(2))} $`}</Text>\n            </Item>\n          </ul>\n        </Wrapper>\n      ) : (\n        <h1>To start keeping statistics, you need to create a new game.</h1>\n      )}\n    </Container>\n  );\n};\n\nexport default Statistics;\n","export interface IGetDataForDiagramState {\n  labeles: string[];\n  dataArr: number[];\n  backgroundColor: string[];\n  borderColor: string[];\n  borderWidth: number;\n}\n\nconst getDataForDiagram = ({\n  labeles,\n  dataArr,\n  backgroundColor,\n  borderColor,\n  borderWidth,\n}: IGetDataForDiagramState) => {\n  const data = {\n    labels: [...labeles],\n    datasets: [\n      {\n        data: [...dataArr],\n        backgroundColor: [...backgroundColor],\n        borderColor: [...borderColor],\n        borderWidth,\n      },\n    ],\n  };\n\n  return data;\n};\n\nexport default getDataForDiagram;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const Chart = styled.div`\n  width: 470px;\n`;\n","import { useState, useEffect } from 'react';\nimport useNetProfit from 'hooks/useNetProfit';\n\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { useGetStatisticsQuery } from 'redux/statistics/statisticsApi';\nimport getDataForDiagram from 'helpers/getDataForDiagram';\n\nimport Container from 'components/InterfaceElements/Container';\nimport { Wrapper, Chart } from './Diagrams.styled';\n\nconst Diagrams: React.FC<{}> = () => {\n  const [totalBets, setTotalBets] = useState(0);\n  const [wonBets, setWonBets] = useState(0);\n  const [lostBets, setLostBets] = useState(0);\n  const [moneyEarned, setMoneyEarned] = useState(0);\n  const [moneySpent, setMoneySpent] = useState(0);\n\n  ChartJS.register(ArcElement, Tooltip, Legend);\n  const { data: statistics } = useGetStatisticsQuery();\n  const { netto } = useNetProfit();\n\n  useEffect(() => {\n    if (statistics) {\n      const stats = statistics.statistics;\n\n      setTotalBets(stats.totalBets);\n      setWonBets(stats.wonBets);\n      setLostBets(stats.lostBets);\n\n      setMoneyEarned(stats.moneyEarned);\n      setMoneySpent(stats.moneySpent);\n    }\n  }, [statistics]);\n\n  const optionBets = {\n    labeles: ['Total bets placed', 'Bets that won', 'Lost bets'],\n    dataArr: [totalBets, wonBets, lostBets],\n    backgroundColor: [\n      'rgba(54, 162, 235, 0.2)',\n      'rgba(75, 192, 192, 0.2)',\n      'rgba(255, 99, 132, 0.2)',\n    ],\n    borderColor: [\n      'rgba(54, 162, 235, 1)',\n      'rgba(75, 192, 192, 1)',\n      'rgba(255, 99, 132, 1)',\n    ],\n    borderWidth: 1,\n  };\n\n  const optionMoney = {\n    labeles: ['Total money earned', 'Total money spent', 'Net profit amounted'],\n    dataArr: [moneyEarned, moneySpent, netto],\n    backgroundColor: [\n      'rgba(75, 192, 192, 0.2)',\n      'rgba(255, 99, 132, 0.2)',\n      'rgba(54, 162, 235, 0.2)',\n    ],\n    borderColor: [\n      'rgba(75, 192, 192, 1)',\n      'rgba(255, 99, 132, 1)',\n      'rgba(54, 162, 235, 1)',\n    ],\n    borderWidth: 1,\n  };\n\n  const dataBets = getDataForDiagram(optionBets);\n  const dataMoney = getDataForDiagram(optionMoney);\n\n  return (\n    <Container\n      type=\"transparent\"\n      width=\"1050px\"\n      padding=\"70px 50px\"\n      margin=\"50px\"\n    >\n      <Wrapper>\n        <Chart>\n          <Doughnut data={dataBets} />\n        </Chart>\n        <Chart>\n          <Doughnut data={dataMoney} />\n        </Chart>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default Diagrams;\n","import Statistics from 'components/Statistics';\nimport Diagrams from 'components/Statistics/Diagrams/Diagrams';\n\nconst StatisticsPage: React.FC<{}> = () => {\n  return (\n    <>\n      <Statistics />\n      <Diagrams />\n    </>\n  );\n};\n\nexport default StatisticsPage;\n"],"names":["useState","netto","setNetto","statistics","useGetStatisticsQuery","data","useEffect","undefined","stats","result","moneyEarned","moneySpent","Wrapper","styled","Title","Item","Text","refetch","isFetching","useNetProfit","Container","type","width","padding","margin","Loader","totalBets","wonBets","lostBets","bankFormatting","Number","toFixed","labeles","dataArr","backgroundColor","borderColor","borderWidth","labels","datasets","Chart","setTotalBets","setWonBets","setLostBets","setMoneyEarned","setMoneySpent","ChartJS","ArcElement","Tooltip","Legend","optionMoney","dataBets","getDataForDiagram","dataMoney"],"sourceRoot":""}